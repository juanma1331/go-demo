package shared

script InitToastEvents() {
    const delay = 3000
    const toaster = document.querySelector('[data-toaster]')

  
      if (!toaster) {
        throw new Error('No toaster found')
    }


    /**
    * @param {string} message
    * @param {string} type
    * @returns {HTMLDivElement}
    */
    const createToast = (message, type) => {
        const toast = document.createElement('div')
        toast.classList.add(
        'bg-slate-50', 
        'text-slate-900', 
        'p-4', 'rounded', 
        'shadow-md', 
        'mb-4', 
        'text-sm',
        'font-medium', 
        'tracking-wide',
        'outline',
        'outline-1'
        )
        
        if (type === 'success') {
            toast.classList.add("outline-green-500")
        } else if (type === 'error') {
            toast.classList.add('outline-red-500')
        } else if (type === 'warning') {
            toast.classList.add('outline-yellow-500')
        } else if (type === 'info') {
            toast.classList.add('outline-blue-500')
        } else {
            throw new Error('Invalid type provided')
        }

        toast.innerText = message
        return toast
    }

    const notify = (event) => {
        /**
        * @type {{message: string, type: string}}
        */
        const notification = JSON.parse(event.detail.value)

        if (notification.message === undefined || typeof notification.message !== 'string') {
            throw new Error('No message provided or message is not a string')
        }

        if (notification.type === undefined || typeof notification.type !== 'string') {
            throw new Error('No type provided or type is not a string')
        }

        const toast = createToast(notification.message, notification.type)

        toaster.appendChild(toast)

        setTimeout(() => {
            toaster.removeChild(toast)
        }, delay)
    }

    document.addEventListener('notify', notify)
    
}

templ Toast() {
	<div data-toaster class="absolute right-24 top-24"></div>
}
